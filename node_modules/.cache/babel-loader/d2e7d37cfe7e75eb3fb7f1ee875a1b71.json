{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\nimport fetch from 'cross-fetch';\nexport const addComment = comment => {\n  return {\n    type: ActionTypes.ADD_COMMENT,\n    payload: comment\n  };\n};\nexport const postComment = (dishId, rating, author, comment) => dispatch => {\n  const newComment = {\n    dishId: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  };\n  newComment.date = new Date().toISOString();\n  return fetch(baseUrl + 'comments', {\n    method: 'POST',\n    body: JSON.stringify(newComment),\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'same-origin'\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      let error = new Error('Error ' + response.status + \": \" + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    let errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(response => dispatch(addComment(response))).catch(error => {\n    console.log('Post comments ', error.message);\n    alert('Your comment could not be posted\\nError: ' + error.message);\n  });\n};\nexport const fetchDishes = () => dispatch => {\n  dispatch(dishesLoading(true));\n  return fetch(baseUrl + 'dishes').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      let error = new Error('Error ' + response.status + \": \" + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    let errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(dishes => dispatch(addDishes(dishes))).catch(error => dispatch(dishesFailed(error.message)));\n};\nexport const dishesLoading = () => ({\n  type: ActionTypes.DISHES_LOADING\n});\nexport const dishesFailed = errmess => ({\n  type: ActionTypes.DISHES_FAILED,\n  payload: errmess\n});\nexport const addDishes = dishes => ({\n  type: ActionTypes.ADD_DISHES,\n  payload: dishes\n});\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + 'comments').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      let error = new Error('Error ' + response.status + \": \" + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    let errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n};\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n});\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading(true));\n  return fetch(baseUrl + 'promotions').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      let error = new Error('Error ' + response.status + \": \" + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    let errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(promos => dispatch(addPromos(promos))).catch(error => dispatch(promosFailed(error.message)));\n};\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n});\n/***** */\n\nexport const fetchLeaders = () => dispatch => {\n  dispatch(dishesLoading(true));\n  return fetch(baseUrl + 'leaders').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      let error = new Error('Error ' + response.status + \": \" + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    let errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(leaders => dispatch(addLeaders(leaders))).catch(error => dispatch(leadersFailed(error.message)));\n};\nexport const leadersLoading = () => ({\n  type: ActionTypes.LEADERS_LOADING\n});\nexport const leadersFailed = errmess => ({\n  type: ActionTypes.LEADERS_FAILED,\n  payload: errmess\n});\nexport const addLeaders = leaders => ({\n  type: ActionTypes.ADD_LEADERS,\n  payload: leaders\n});\n/*********************** */\n\nexport const postFeedback = value => {\n  let newValue = { ...value\n  };\n  newValue.date = new Date().toISOString();\n  return fetch(baseUrl + 'feedback', {\n    method: 'POST',\n    body: JSON.stringify(newValue),\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'same-origin'\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      let error = new Error('Error ' + response.status + \": \" + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    let errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(response => alert(JSON.stringify(response))).catch(error => {\n    console.log('Post comments ', error.message);\n    alert('Your Feedback could not be submitted\\nError: ' + error.message);\n  });\n};","map":{"version":3,"sources":["F:/restaurant/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrl","fetch","addComment","comment","type","ADD_COMMENT","payload","postComment","dishId","rating","author","dispatch","newComment","date","Date","toISOString","method","body","JSON","stringify","headers","credentials","then","response","ok","error","Error","status","statusText","errmess","message","json","catch","console","log","alert","fetchDishes","dishesLoading","dishes","addDishes","dishesFailed","DISHES_LOADING","DISHES_FAILED","ADD_DISHES","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","fetchPromos","promosLoading","promos","addPromos","promosFailed","PROMOS_LOADING","PROMOS_FAILED","ADD_PROMOS","fetchLeaders","leaders","addLeaders","leadersFailed","leadersLoading","LEADERS_LOADING","LEADERS_FAILED","ADD_LEADERS","postFeedback","value","newValue"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\r\nimport {baseUrl} from '../shared/baseUrl'\r\nimport fetch from 'cross-fetch'\r\n\r\n\r\nexport const addComment = (comment)=>\r\n{\r\n    return(\r\n        {\r\n            type:ActionTypes.ADD_COMMENT,\r\n            payload:comment\r\n        }\r\n    )\r\n}\r\n\r\nexport const postComment = (dishId,rating,author,comment)=>(dispatch)=>\r\n{\r\nconst newComment ={\r\n        dishId:dishId,\r\n        rating:rating,\r\n        author:author,\r\n        comment:comment\r\n}\r\nnewComment.date=new Date().toISOString();\r\nreturn fetch(baseUrl+'comments',\r\n{\r\n    method:'POST',\r\n    body:JSON.stringify(newComment),\r\n    headers: {\r\n            'Content-Type':'application/json'\r\n    },\r\n    credentials:'same-origin'\r\n})\r\n\r\n                .then(response=>{\r\n                        if (response.ok)\r\n                        {\r\n                                return response;\r\n                        }\r\n                        else\r\n                        {\r\n                                let error = new Error('Error '+response.status+\": \"+response.statusText);\r\n                                error.response = response;\r\n                                throw error;\r\n                        }\r\n                },\r\n                error=>{\r\n                        let errmess = new Error(error.message);\r\n                        throw errmess;\r\n                })\r\n                .then(response=>response.json())\r\n                .then(response=>dispatch(addComment(response)))\r\n                .catch(error=>{console.log('Post comments ',error.message);\r\n                        alert('Your comment could not be posted\\nError: '+error.message)\r\n        });\r\n\r\n}\r\n\r\n\r\nexport const fetchDishes = ()=>(dispatch)=>\r\n{\r\n        \r\n        dispatch(dishesLoading(true));\r\n        return fetch(baseUrl+'dishes')\r\n                .then(response=>{\r\n                        if (response.ok)\r\n                        {\r\n                                return response;\r\n                        }\r\n                        else\r\n                        {\r\n                                let error = new Error('Error '+response.status+\": \"+response.statusText);\r\n                                error.response = response;\r\n                                throw error;\r\n                        }\r\n                },\r\n                error=>{\r\n                        let errmess = new Error(error.message);\r\n                        throw errmess;\r\n                })\r\n                .then(response=>response.json())\r\n                .then(dishes=>dispatch(addDishes(dishes)))\r\n                .catch(error=>dispatch(dishesFailed(error.message)));\r\n\r\n}\r\n\r\nexport const dishesLoading=()=>({\r\n        type:ActionTypes.DISHES_LOADING\r\n});\r\n\r\nexport const dishesFailed = (errmess)=>({\r\n        type:ActionTypes.DISHES_FAILED,\r\n        payload:errmess\r\n})\r\n\r\nexport const addDishes = (dishes)=>(\r\n        {\r\n                type:ActionTypes.ADD_DISHES,\r\n                payload:dishes\r\n        }\r\n)\r\n\r\nexport const fetchComments = ()=>(dispatch)=>\r\n{\r\n        return fetch(baseUrl+'comments')\r\n        .then(response=>{\r\n                if (response.ok)\r\n                {\r\n                        return response;\r\n                }\r\n                else\r\n                {\r\n                        let error = new Error('Error '+response.status+\": \"+response.statusText);\r\n                        error.response = response;\r\n                        throw error;\r\n                }\r\n        },\r\n        error=>{\r\n                let errmess = new Error(error.message);\r\n                throw errmess;\r\n        })\r\n                .then(response=>response.json())\r\n                .then(comments=>dispatch(addComments(comments)))\r\n                .catch(error=>dispatch(commentsFailed(error.message)));\r\n                \r\n}\r\n\r\nexport const commentsFailed = (errmess)=>({\r\n        type:ActionTypes.COMMENTS_FAILED,\r\n        payload:errmess\r\n})\r\n\r\nexport const addComments = (comments)=>(\r\n        {\r\n                type:ActionTypes.ADD_COMMENTS,\r\n                payload:comments\r\n        }\r\n)\r\n\r\nexport const fetchPromos = ()=>(dispatch)=>\r\n{\r\n        dispatch(promosLoading(true));\r\n        return fetch(baseUrl+'promotions')\r\n        .then(response=>{\r\n                if (response.ok)\r\n                {\r\n                        return response;\r\n                }\r\n                else\r\n                {\r\n                        let error = new Error('Error '+response.status+\": \"+response.statusText);\r\n                        error.response = response;\r\n                        throw error;\r\n                }\r\n        },\r\n        error=>{\r\n                let errmess = new Error(error.message);\r\n                throw errmess;\r\n        })\r\n                .then(response=>response.json())\r\n                .then(promos=>dispatch(addPromos(promos)))\r\n                .catch(error=>dispatch(promosFailed(error.message)));\r\n\r\n}\r\n\r\nexport const promosLoading=()=>({\r\n        type:ActionTypes.PROMOS_LOADING\r\n});\r\n\r\nexport const promosFailed = (errmess)=>({\r\n        type:ActionTypes.PROMOS_FAILED,\r\n        payload:errmess\r\n})\r\n\r\nexport const addPromos = (promos)=>(\r\n        {\r\n                type:ActionTypes.ADD_PROMOS,\r\n                payload:promos\r\n        }\r\n)\r\n\r\n\r\n/***** */\r\nexport const fetchLeaders = ()=>(dispatch)=>\r\n{\r\n        \r\n        dispatch(dishesLoading(true));\r\n        return fetch(baseUrl+'leaders')\r\n                .then(response=>{\r\n                        if (response.ok)\r\n                        {\r\n                                return response;\r\n                        }\r\n                        else\r\n                        {\r\n                                let error = new Error('Error '+response.status+\": \"+response.statusText);\r\n                                error.response = response;\r\n                                throw error;\r\n                        }\r\n                },\r\n                error=>{\r\n                        let errmess = new Error(error.message);\r\n                        throw errmess;\r\n                })\r\n                .then(response=>response.json())\r\n                .then(leaders=>dispatch(addLeaders(leaders)))\r\n                .catch(error=>dispatch(leadersFailed(error.message)));\r\n\r\n}\r\n\r\nexport const leadersLoading=()=>({\r\n        type:ActionTypes.LEADERS_LOADING\r\n});\r\n\r\nexport const leadersFailed = (errmess)=>({\r\n        type:ActionTypes.LEADERS_FAILED,\r\n        payload:errmess\r\n})\r\n\r\nexport const addLeaders = (leaders)=>(\r\n        {\r\n                type:ActionTypes.ADD_LEADERS,\r\n                payload:leaders\r\n        }\r\n)\r\n/*********************** */\r\n\r\nexport const postFeedback = (value)=>\r\n{\r\nlet newValue= {...value}     \r\nnewValue.date=new Date().toISOString();\r\nreturn fetch(baseUrl+'feedback',\r\n{\r\n    method:'POST',\r\n    body:JSON.stringify(newValue),\r\n    headers: {\r\n            'Content-Type':'application/json'\r\n    },\r\n    credentials:'same-origin'\r\n})\r\n\r\n                .then(response=>{\r\n                        if (response.ok)\r\n                        {\r\n                                return response;\r\n                        }\r\n                        else\r\n                        {\r\n                                let error = new Error('Error '+response.status+\": \"+response.statusText);\r\n                                error.response = response;\r\n                                throw error;\r\n                        }\r\n                },\r\n                error=>{\r\n                        let errmess = new Error(error.message);\r\n                        throw errmess;\r\n                })\r\n                .then(response=>response.json())\r\n                .then(response=>alert(JSON.stringify(response)))\r\n                .catch(error=>{console.log('Post comments ',error.message);\r\n                        alert('Your Feedback could not be submitted\\nError: '+error.message)\r\n        });\r\n\r\n}"]},"metadata":{},"sourceType":"module"}